package com.ami.api.utill;

import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import org.xmlpull.v1.XmlPullParser;

import android.util.TypedValue;
import brut.androlib.res.decoder.AXmlResourceParser;

/**
 * 鍒嗘瀽APK鏂囦欢锛屽彇寰桝PK鏂囦欢涓殑 鍖呭悕銆佺増鏈彿鍙婂浘鏍�
 */
public class AnalysisApk
{
    
    private String versionName;
    
    private String package_;
    
    /**
     * 瑙ｅ帇 zip 鏂囦欢(apk鍙互褰撴垚涓�涓獄ip鏂囦欢)锛屾敞鎰忎笉鑳借В鍘� rar 鏂囦欢鍝︼紝鍙兘瑙ｅ帇 zip 鏂囦欢 瑙ｅ帇 rar 鏂囦欢 浼氬嚭鐜�
     * java.io.IOException: Negative seek offset 寮傚父 create date:2009- 6- 9
     * author:Administrator
     * 
     * @param apkUrl zip 鏂囦欢锛屾敞鎰忚鏄瀹楃殑 zip 鏂囦欢鍝︼紝涓嶈兘鏄妸 rar 鐨勭洿鎺ユ敼涓� zip 杩欐牱浼氬嚭鐜�
     *            java.io.IOException: Negative seek offset 寮傚父
     * @param logoUrl 鍥炬爣鐢熸垚鐨勫湴鍧�
     * @throws IOException
     */
    private String[] unZip(String apkUrl)
    {
        // [0]:鐗堟湰鍙�;[1]鍖呭悕
        String[] st = new String[2];
        byte b[] = new byte[1024];
        int length;
        ZipFile zipFile;
        try
        {
            zipFile = new ZipFile(new File(apkUrl));
            Enumeration enumeration = zipFile.entries();
            ZipEntry zipEntry = null;
            while (enumeration.hasMoreElements())
            {
                zipEntry = (ZipEntry)enumeration.nextElement();
                if (zipEntry.isDirectory())
                {
                    
                }
                else
                {
                    if ("AndroidManifest.xml".equals(zipEntry.getName()))
                    {
                        try
                        {
                            AXmlResourceParser parser = new AXmlResourceParser();
                            parser.open(zipFile.getInputStream(zipEntry));
                            while (true)
                            {
                                int type = parser.next();
                                if (type == XmlPullParser.END_DOCUMENT)
                                {
                                    break;
                                }
                                switch (type)
                                {
                                    case XmlPullParser.START_TAG:
                                    {
                                        for (int i = 0; i != parser.getAttributeCount(); ++i)
                                        {
                                            if ("versionName".equals(parser.getAttributeName(i)))
                                            {
                                                st[0] = getAttributeValue(parser, i);
                                            }
                                            else if ("package".equals(parser.getAttributeName(i)))
                                            {
                                                st[1] = getAttributeValue(parser, i);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            e.printStackTrace();
                        }
                    }
                    
                    // if
                    // ("res/drawable-ldpi/icon.png".equals(zipEntry.getName()))
                    // {
                    // OutputStream outputStream = new
                    // FileOutputStream(logoUrl);
                    // InputStream inputStream =
                    // zipFile.getInputStream(zipEntry);
                    // while ((length = inputStream.read(b)) > 0)
                    // outputStream.write(b, 0, length);
                    // }
                }
            }
        }
        catch (IOException e)
        {
            // TODO Auto-generated catch block
            // e.printStackTrace();
        }
        return st;
    }
    
    private String getAttributeValue(AXmlResourceParser parser, int index)
    {
        int type = parser.getAttributeValueType(index);
        int data = parser.getAttributeValueData(index);
        if (type == TypedValue.TYPE_STRING)
        {
            return parser.getAttributeValue(index);
        }
        if (type == TypedValue.TYPE_ATTRIBUTE)
        {
            return String.format("?%s%08X", getPackage(data), data);
        }
        if (type == TypedValue.TYPE_REFERENCE)
        {
            return String.format("@%s%08X", getPackage(data), data);
        }
        if (type == TypedValue.TYPE_FLOAT)
        {
            return String.valueOf(Float.intBitsToFloat(data));
        }
        if (type == TypedValue.TYPE_INT_HEX)
        {
            return String.format("0x%08X", data);
        }
        if (type == TypedValue.TYPE_INT_BOOLEAN)
        {
            return data != 0 ? "true" : "false";
        }
        if (type == TypedValue.TYPE_DIMENSION)
        {
            return Float.toString(complexToFloat(data)) + DIMENSION_UNITS[data & TypedValue.COMPLEX_UNIT_MASK];
        }
        if (type == TypedValue.TYPE_FRACTION)
        {
            return Float.toString(complexToFloat(data)) + FRACTION_UNITS[data & TypedValue.COMPLEX_UNIT_MASK];
        }
        if (type >= TypedValue.TYPE_FIRST_COLOR_INT && type <= TypedValue.TYPE_LAST_COLOR_INT)
        {
            return String.format("#%08X", data);
        }
        if (type >= TypedValue.TYPE_FIRST_INT && type <= TypedValue.TYPE_LAST_INT)
        {
            return String.valueOf(data);
        }
        return String.format("<0x%X, type 0x%02X>", data, type);
    }
    
    private String getPackage(int id)
    {
        if (id >>> 24 == 1)
        {
            return "android:";
        }
        return "";
    }
    
    // ///////////////////////////////// ILLEGAL STUFF, DONT LOOK :)
    public float complexToFloat(int complex)
    {
        return (complex & 0xFFFFFF00) * RADIX_MULTS[(complex >> 4) & 3];
    }
    
    private final float RADIX_MULTS[] =
    {0.00390625F, 3.051758E-005F, 1.192093E-007F, 4.656613E-010F};
    
    private final String DIMENSION_UNITS[] =
    {"px", "dip", "sp", "pt", "in", "mm", "", ""};
    
    private final String FRACTION_UNITS[] =
    {"%", "%p", "", "", "", "", "", ""};
    
    public String getVersionName()
    {
        return versionName;
    }
    
    /**
     * 瑙ｆ瀽鏂囦欢
     * 
     * @param url
     * @see [绫汇�佺被#鏂规硶銆佺被#鎴愬憳]
     */
    public boolean decode(String url)
    {
        String t[] = unZip(url);
        
        if (null != t && t.length == 2)
        {
            this.versionName = t[0];
            this.package_ = t[1];
            
            return true;
        }
        else
        {
            return false;
        }
        
    }
    
    public void setVersionName(String versionName)
    {
        this.versionName = versionName;
    }
    
    public String getPackage_()
    {
        return package_;
    }
    
    public void setPackage_(String package_)
    {
        this.package_ = package_;
    }
    
}

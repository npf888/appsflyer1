package com.ami.mail;

import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ami.api.exception.APIException;
import com.ami.api.utill.DateTools;
import com.ami.common.TimeUtil;
import com.ami.mail.pojo.Country;
import com.ami.mail.pojo.NewPeopleVO;
import com.ami.mail.pojo.RemainVO;
import com.ami.texas.log.service.LogService;
import com.ami.weixin.course.schedule.Task;

/**
 * 发送邮件主类
 * @author JavaServer
 *
 */
@Service
public class ScheduleSendMail extends Task{
	private final static Logger logger = Logger.getLogger(ScheduleSendMail.class);
	@Autowired
	private  LogService logService;
	
	public List<HashMap<String, Object>>  getDateList() throws APIException{
		return logService.queryTablesDate("player_keep_log");
	}
	//每天新注册用户所在的国家分别有多少人
	public   List<NewPeopleVO> getRewPeopleList(){
		try{
			
			List<HashMap<String, Object>> date_list = getDateList();
			List<Country> countrys = logService.getAllCountry();
			List<NewPeopleVO>  newPeopleList = logService.queryPerCountryPeople(date_list);
			if(newPeopleList == null || newPeopleList.size() == 0){
				return null;
			}
			List<NewPeopleVO> newPeopleXlsx = new ArrayList<NewPeopleVO>();
			DecimalFormat    df   = new DecimalFormat("######0.00"); 
			for(NewPeopleVO map:newPeopleList){
				NewPeopleVO newPeopleVO = new NewPeopleVO();
				//等于2就是IOS
				if(map.getChannelType() != null && map.getChannelType().equals("2")){
					newPeopleVO.setChannelType("ios");
				}else{
					newPeopleVO.setChannelType("android");
				}
				double newGuy = Double.valueOf(map.getPeopleNum());
				double remain1 = Double.valueOf(map.getRemain1());
				double remain3 = Double.valueOf(map.getRemain3());
				double remain4 = Double.valueOf(map.getRemain4());
				double remain5 = Double.valueOf(map.getRemain5());
				double remain7 = Double.valueOf(map.getRemain7());
				double remain10 = Double.valueOf(map.getRemain10());
				double remain15 = Double.valueOf(map.getRemain15());
				double remain30 = Double.valueOf(map.getRemain30());
				newPeopleVO.setDate(map.getDate());
				
				for(Country country:countrys){
					if(map.getCountries() != null && map.getCountries().equals(country.getCountry())){
						newPeopleVO.setCountries(country.getLangDesc());
						break;
					}
				}
				newPeopleVO.setPeopleNum(map.getPeopleNum());
				newPeopleVO.setRemain1(df.format(remain1/newGuy));
				newPeopleVO.setRemain3(df.format(remain3/newGuy));
				newPeopleVO.setRemain4(df.format(remain4/newGuy));
				newPeopleVO.setRemain5(df.format(remain5/newGuy));
				newPeopleVO.setRemain7(df.format(remain7/newGuy));
				newPeopleVO.setRemain10(df.format(remain10/newGuy));
				newPeopleVO.setRemain15(df.format(remain15/newGuy));
				newPeopleVO.setRemain30(df.format(remain30/newGuy));
				newPeopleXlsx.add(newPeopleVO);
			}
			return newPeopleXlsx;
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}
	public   List<RemainVO> getRemainVOList(){
    	
    	Map<String, Object> params = new HashMap<String,Object>();
		params.put("start", DateTools.addDate(System.currentTimeMillis(), -30, DateTools.DAY, "yyyy_MM_dd"));
		params.put("end", DateTools.getCurrentDate("yyyy_MM_dd"));
    	//查询符合时间规则的数据表
		try{
			List<HashMap<String, Object>> date_list = getDateList();
	    	List<HashMap<String, Object>> list = logService.retained(params, date_list);
	    	List<RemainVO> xlsx = new ArrayList<RemainVO>();
	    	DecimalFormat    df   = new DecimalFormat("######0.00");   
	    	for(HashMap<String, Object> map:list){
	    		RemainVO remainVO = new RemainVO();
	    		remainVO.setDate((String)map.get("date"));
	    		long newGuy = (long)map.get("1");
	    		remainVO.setNewGuy(newGuy+"");
	    		if(map.get("2")!=null){
	    			long t = (long)map.get("2");
	    			double tr = (double)t/(double)newGuy;
	    			String sts = df.format(tr);
	    			remainVO.setDay2Remain(sts);
	    		}else{
	    			remainVO.setDay2Remain("0");
	    		}
	    		
	    		if(map.get("3")!=null){
	    			long t = (long)map.get("3");
	    			double tr = (double)t/(double)newGuy;
	    			String sts = df.format(tr);
	    			remainVO.setDay3Remain(sts);
	    		}else{
	    			remainVO.setDay3Remain("0");
	    		}
	    		
	    		if(map.get("4")!=null){
	    			long t = (long)map.get("4");
	    			double tr = (double)t/(double)newGuy;
	    			String sts = df.format(tr);
	    			remainVO.setDay4Remain(sts);
	    		}else{
	    			remainVO.setDay4Remain("0");
	    		}
	    		
	    		if(map.get("5")!=null){
	    			long t = (long)map.get("5");
	    			double tr = (double)t/(double)newGuy;
	    			String sts = df.format(tr);
	    			remainVO.setDay5Remain(sts);
	    		}else{
	    			remainVO.setDay5Remain("0");
	    		}
	    		
	    		if(map.get("6")!=null){
	    			long t = (long)map.get("6");
	    			double tr = (double)t/(double)newGuy;
	    			String sts = df.format(tr);
	    			remainVO.setDay7Remain(sts);
	    		}else{
	    			remainVO.setDay7Remain("0");
	    		}
	    		
	    		if(map.get("7")!=null){
	    			long t = (long)map.get("7");
	    			double tr = (double)t/(double)newGuy;
	    			String sts = df.format(tr);
	    			remainVO.setDay10Remain(sts);
	    		}else{
	    			remainVO.setDay10Remain("0");
	    		}
	    		
	    		if(map.get("8")!=null){
	    			long t = (long)map.get("8");
	    			double tr = (double)t/(double)newGuy;
	    			String sts = df.format(tr);
	    			remainVO.setDay15Remain(sts);
	    		}else{
	    			remainVO.setDay15Remain("0");
	    		}
	    		if(map.get("9")!=null){
	    			long t = (long)map.get("9");
	    			double tr = (double)t/(double)newGuy;
	    			String sts = df.format(tr);
	    			remainVO.setDay30Remain(sts);
	    		}else{
	    			remainVO.setDay30Remain("0");
	    		}
	    		
	    		xlsx.add(remainVO);
	    	}
	    	return xlsx;
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void execute() {
		List<NewPeopleVO> newPeopleList= getRewPeopleList();
		InputStream isNewPeople = ExcelHelper.xlsxExcel2007(newPeopleList);
		List<RemainVO> xlsx = getRemainVOList();
		logger.info(xlsx+"-------------------"+newPeopleList);
 		InputStream is = ExcelHelper.xlsxExcel2007(xlsx);
 		if(is == null){
 			throw new RuntimeException("List<RemainVO> is null...");
 		}
		SendMail sendMail = new SendMail(is,isNewPeople);
		try {
			sendMail.send();
			logger.info(TimeUtil.format(new Date())+"---------------------------分界线------------------------------------------------------------------------------------------------------------");
			SendMailParam.receiveMailAccounts.clear();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
